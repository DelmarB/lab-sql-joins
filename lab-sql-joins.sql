-- Imagine you work at a movie rental company as an analyst. By using SQL in the challenges below, you are required to gain insights into different elements of its business operations.
USE sakila;
show tables;

## Challenge - Joining on multiple tables

-- Write SQL queries to perform the following tasks using the Sakila database:
-- 1. List the number of films per category.

SELECT category.name, COUNT(film.film_id)
FROM sakila.category
LEFT JOIN film_category ON category.category_id = film_category.category_id
LEFT JOIN film ON film.film_id = film_category.film_id
GROUP BY category.name;

-- 2. Retrieve the store ID, city, and country for each store.

SELECT store.store_id, city.city_id, country.country
FROM sakila.store
LEFT JOIN address ON store.address_id = address.address_id
LEFT JOIN city ON address.city_id = city.city_id
LEFT JOIN country ON city.country_id = country.country_id
GROUP BY store.store_id, city.city, country.country;

-- 3.  Calculate the total revenue generated by each store in dollars.
SELECT store.store_id, sum(datediff(rental.return_date, rental.rental_date)*film.rental_rate) as revenue
FROM sakila.store
INNER JOIN inventory ON store.store_id = inventory.store_id
INNER JOIN rental ON rental.inventory_id = inventory.inventory_id 
INNER JOIN film ON film.film_id = inventory.film_id
WHERE rental.return_date IS NOT NULL
GROUP BY store.store_id
ORDER BY store.store_id;

sum(((datediff(rental.return_date) - datediff(rental.rental_date)) * film.rental_rate9

-- 4.  Determine the average running time of films for each category.

show databases;
-- **Bonus**:

-- 5.  Identify the film categories with the longest average running time.
-- 6.  Display the top 10 most frequently rented movies in descending order.
-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
--    Include a column indicating whether each title is 'Available' or 'NOT available.' 
--    Note that there are 42 titles that are not in the inventory, and this information can be obtained using a `CASE` statement combined with `IFNULL`."

-- Here are some tips to help you successfully complete the lab:

-- ***Tip 1***: This lab involves joins with multiple tables, which can be challenging. Take your time and follow the steps we discussed in class:
-- - Make sure you understand the relationships between the tables in the database. This will help you determine which tables to join and which columns to use in your joins.
-- - Identify a common column for both tables to use in the `ON` section of the join. If there isn't a common column, you may need to add another table with a common column.
-- - Decide which table you want to use as the left table (immediately after `FROM`) and which will be the right table (immediately after `JOIN`).
-- - Determine which table you want to include all records from. This will help you decide which type of `JOIN` to use. 
--      If you want all records from the first table, use a `LEFT JOIN`. If you want all records from the second table, use a `RIGHT JOIN`. 
--      If you want records from both tables only where there is a match, use an `INNER JOIN`.
-- - Use table aliases to make your queries easier to read and understand. This is especially important when working with multiple tables.
-- - Write the query

-- ***Tip 2***: Break down the problem into smaller, more manageable parts. For example, you might start by writing a query to retrieve data from just two tables before adding additional tables to the join. Test your queries as you go, and check the output carefully to make sure it matches what you expect. This process takes time, so be patient and go step by step to build your query incrementally.